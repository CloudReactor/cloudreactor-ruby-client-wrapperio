=begin
#CloudReactor API

#CloudReactor API Documentation

The version of the OpenAPI document: 0.2.0
Contact: jeff@cloudreactor.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module CloudReactorAPIClient
  # Options for running a Task as a service in AWS ECS.
  class AwsEcsServiceOptions
    attr_accessor :load_balancers

    attr_accessor :health_check_grace_period_seconds

    attr_accessor :force_new_deployment

    attr_accessor :deploy_minimum_healthy_percent

    attr_accessor :deploy_maximum_percent

    attr_accessor :deploy_enable_circuit_breaker

    attr_accessor :deploy_rollback_on_failure

    attr_accessor :enable_ecs_managed_tags

    attr_accessor :propagate_tags

    attr_accessor :tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'load_balancers' => :'load_balancers',
        :'health_check_grace_period_seconds' => :'health_check_grace_period_seconds',
        :'force_new_deployment' => :'force_new_deployment',
        :'deploy_minimum_healthy_percent' => :'deploy_minimum_healthy_percent',
        :'deploy_maximum_percent' => :'deploy_maximum_percent',
        :'deploy_enable_circuit_breaker' => :'deploy_enable_circuit_breaker',
        :'deploy_rollback_on_failure' => :'deploy_rollback_on_failure',
        :'enable_ecs_managed_tags' => :'enable_ecs_managed_tags',
        :'propagate_tags' => :'propagate_tags',
        :'tags' => :'tags'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'load_balancers' => :'Array<AwsEcsServiceLoadBalancerDetails>',
        :'health_check_grace_period_seconds' => :'Integer',
        :'force_new_deployment' => :'Boolean',
        :'deploy_minimum_healthy_percent' => :'Integer',
        :'deploy_maximum_percent' => :'Integer',
        :'deploy_enable_circuit_breaker' => :'Boolean',
        :'deploy_rollback_on_failure' => :'Boolean',
        :'enable_ecs_managed_tags' => :'Boolean',
        :'propagate_tags' => :'PropagateTagsEnum',
        :'tags' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'tags'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CloudReactorAPIClient::AwsEcsServiceOptions` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CloudReactorAPIClient::AwsEcsServiceOptions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'load_balancers')
        if (value = attributes[:'load_balancers']).is_a?(Array)
          self.load_balancers = value
        end
      end

      if attributes.key?(:'health_check_grace_period_seconds')
        self.health_check_grace_period_seconds = attributes[:'health_check_grace_period_seconds']
      end

      if attributes.key?(:'force_new_deployment')
        self.force_new_deployment = attributes[:'force_new_deployment']
      end

      if attributes.key?(:'deploy_minimum_healthy_percent')
        self.deploy_minimum_healthy_percent = attributes[:'deploy_minimum_healthy_percent']
      end

      if attributes.key?(:'deploy_maximum_percent')
        self.deploy_maximum_percent = attributes[:'deploy_maximum_percent']
      end

      if attributes.key?(:'deploy_enable_circuit_breaker')
        self.deploy_enable_circuit_breaker = attributes[:'deploy_enable_circuit_breaker']
      end

      if attributes.key?(:'deploy_rollback_on_failure')
        self.deploy_rollback_on_failure = attributes[:'deploy_rollback_on_failure']
      end

      if attributes.key?(:'enable_ecs_managed_tags')
        self.enable_ecs_managed_tags = attributes[:'enable_ecs_managed_tags']
      end

      if attributes.key?(:'propagate_tags')
        self.propagate_tags = attributes[:'propagate_tags']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @load_balancers.nil?
        invalid_properties.push('invalid value for "load_balancers", load_balancers cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @load_balancers.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          load_balancers == o.load_balancers &&
          health_check_grace_period_seconds == o.health_check_grace_period_seconds &&
          force_new_deployment == o.force_new_deployment &&
          deploy_minimum_healthy_percent == o.deploy_minimum_healthy_percent &&
          deploy_maximum_percent == o.deploy_maximum_percent &&
          deploy_enable_circuit_breaker == o.deploy_enable_circuit_breaker &&
          deploy_rollback_on_failure == o.deploy_rollback_on_failure &&
          enable_ecs_managed_tags == o.enable_ecs_managed_tags &&
          propagate_tags == o.propagate_tags &&
          tags == o.tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [load_balancers, health_check_grace_period_seconds, force_new_deployment, deploy_minimum_healthy_percent, deploy_maximum_percent, deploy_enable_circuit_breaker, deploy_rollback_on_failure, enable_ecs_managed_tags, propagate_tags, tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CloudReactorAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
