=begin
#CloudReactor API

#CloudReactor API Documentation

The version of the OpenAPI document: 0.2.0
Contact: jeff@cloudreactor.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module CloudReactorAPIClient
  # AwsEcsExecutionMethods contain configuration for running Tasks in AWS ECS.
  class AwsEcsExecutionMethod
    attr_accessor :type

    attr_accessor :task_definition_arn

    attr_accessor :task_definition_infrastructure_website_url

    attr_accessor :allocated_cpu_units

    attr_accessor :allocated_memory_mb

    attr_accessor :tags

    attr_accessor :subnets

    attr_accessor :subnet_infrastructure_website_urls

    attr_accessor :security_groups

    attr_accessor :security_group_infrastructure_website_urls

    attr_accessor :assign_public_ip

    attr_accessor :task_arn

    attr_accessor :launch_type

    attr_accessor :cluster_arn

    attr_accessor :cluster_infrastructure_website_url

    attr_accessor :execution_role

    attr_accessor :execution_role_infrastructure_website_url

    attr_accessor :task_role

    attr_accessor :task_role_infrastructure_website_url

    attr_accessor :platform_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'task_definition_arn' => :'task_definition_arn',
        :'task_definition_infrastructure_website_url' => :'task_definition_infrastructure_website_url',
        :'allocated_cpu_units' => :'allocated_cpu_units',
        :'allocated_memory_mb' => :'allocated_memory_mb',
        :'tags' => :'tags',
        :'subnets' => :'subnets',
        :'subnet_infrastructure_website_urls' => :'subnet_infrastructure_website_urls',
        :'security_groups' => :'security_groups',
        :'security_group_infrastructure_website_urls' => :'security_group_infrastructure_website_urls',
        :'assign_public_ip' => :'assign_public_ip',
        :'task_arn' => :'task_arn',
        :'launch_type' => :'launch_type',
        :'cluster_arn' => :'cluster_arn',
        :'cluster_infrastructure_website_url' => :'cluster_infrastructure_website_url',
        :'execution_role' => :'execution_role',
        :'execution_role_infrastructure_website_url' => :'execution_role_infrastructure_website_url',
        :'task_role' => :'task_role',
        :'task_role_infrastructure_website_url' => :'task_role_infrastructure_website_url',
        :'platform_version' => :'platform_version'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'task_definition_arn' => :'String',
        :'task_definition_infrastructure_website_url' => :'String',
        :'allocated_cpu_units' => :'Integer',
        :'allocated_memory_mb' => :'Integer',
        :'tags' => :'Hash<String, String>',
        :'subnets' => :'Array<String>',
        :'subnet_infrastructure_website_urls' => :'Array<String>',
        :'security_groups' => :'Array<String>',
        :'security_group_infrastructure_website_urls' => :'Array<String>',
        :'assign_public_ip' => :'Boolean',
        :'task_arn' => :'String',
        :'launch_type' => :'AwsEcsLaunchType',
        :'cluster_arn' => :'String',
        :'cluster_infrastructure_website_url' => :'String',
        :'execution_role' => :'String',
        :'execution_role_infrastructure_website_url' => :'String',
        :'task_role' => :'String',
        :'task_role_infrastructure_website_url' => :'String',
        :'platform_version' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'tags',
        :'subnet_infrastructure_website_urls',
        :'security_group_infrastructure_website_urls',
        :'launch_type',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CloudReactorAPIClient::AwsEcsExecutionMethod` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CloudReactorAPIClient::AwsEcsExecutionMethod`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'task_definition_arn')
        self.task_definition_arn = attributes[:'task_definition_arn']
      end

      if attributes.key?(:'task_definition_infrastructure_website_url')
        self.task_definition_infrastructure_website_url = attributes[:'task_definition_infrastructure_website_url']
      end

      if attributes.key?(:'allocated_cpu_units')
        self.allocated_cpu_units = attributes[:'allocated_cpu_units']
      end

      if attributes.key?(:'allocated_memory_mb')
        self.allocated_memory_mb = attributes[:'allocated_memory_mb']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end

      if attributes.key?(:'subnets')
        if (value = attributes[:'subnets']).is_a?(Array)
          self.subnets = value
        end
      end

      if attributes.key?(:'subnet_infrastructure_website_urls')
        if (value = attributes[:'subnet_infrastructure_website_urls']).is_a?(Array)
          self.subnet_infrastructure_website_urls = value
        end
      end

      if attributes.key?(:'security_groups')
        if (value = attributes[:'security_groups']).is_a?(Array)
          self.security_groups = value
        end
      end

      if attributes.key?(:'security_group_infrastructure_website_urls')
        if (value = attributes[:'security_group_infrastructure_website_urls']).is_a?(Array)
          self.security_group_infrastructure_website_urls = value
        end
      end

      if attributes.key?(:'assign_public_ip')
        self.assign_public_ip = attributes[:'assign_public_ip']
      end

      if attributes.key?(:'task_arn')
        self.task_arn = attributes[:'task_arn']
      end

      if attributes.key?(:'launch_type')
        self.launch_type = attributes[:'launch_type']
      end

      if attributes.key?(:'cluster_arn')
        self.cluster_arn = attributes[:'cluster_arn']
      end

      if attributes.key?(:'cluster_infrastructure_website_url')
        self.cluster_infrastructure_website_url = attributes[:'cluster_infrastructure_website_url']
      end

      if attributes.key?(:'execution_role')
        self.execution_role = attributes[:'execution_role']
      end

      if attributes.key?(:'execution_role_infrastructure_website_url')
        self.execution_role_infrastructure_website_url = attributes[:'execution_role_infrastructure_website_url']
      end

      if attributes.key?(:'task_role')
        self.task_role = attributes[:'task_role']
      end

      if attributes.key?(:'task_role_infrastructure_website_url')
        self.task_role_infrastructure_website_url = attributes[:'task_role_infrastructure_website_url']
      end

      if attributes.key?(:'platform_version')
        self.platform_version = attributes[:'platform_version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if !@task_definition_arn.nil? && @task_definition_arn.to_s.length > 1000
        invalid_properties.push('invalid value for "task_definition_arn", the character length must be smaller than or equal to 1000.')
      end

      if @task_definition_infrastructure_website_url.nil?
        invalid_properties.push('invalid value for "task_definition_infrastructure_website_url", task_definition_infrastructure_website_url cannot be nil.')
      end

      if !@task_arn.nil? && @task_arn.to_s.length > 1000
        invalid_properties.push('invalid value for "task_arn", the character length must be smaller than or equal to 1000.')
      end

      if !@cluster_arn.nil? && @cluster_arn.to_s.length > 1000
        invalid_properties.push('invalid value for "cluster_arn", the character length must be smaller than or equal to 1000.')
      end

      if @cluster_infrastructure_website_url.nil?
        invalid_properties.push('invalid value for "cluster_infrastructure_website_url", cluster_infrastructure_website_url cannot be nil.')
      end

      if !@execution_role.nil? && @execution_role.to_s.length > 1000
        invalid_properties.push('invalid value for "execution_role", the character length must be smaller than or equal to 1000.')
      end

      if @execution_role_infrastructure_website_url.nil?
        invalid_properties.push('invalid value for "execution_role_infrastructure_website_url", execution_role_infrastructure_website_url cannot be nil.')
      end

      if !@task_role.nil? && @task_role.to_s.length > 1000
        invalid_properties.push('invalid value for "task_role", the character length must be smaller than or equal to 1000.')
      end

      if @task_role_infrastructure_website_url.nil?
        invalid_properties.push('invalid value for "task_role_infrastructure_website_url", task_role_infrastructure_website_url cannot be nil.')
      end

      if !@platform_version.nil? && @platform_version.to_s.length > 10
        invalid_properties.push('invalid value for "platform_version", the character length must be smaller than or equal to 10.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      return false if !@task_definition_arn.nil? && @task_definition_arn.to_s.length > 1000
      return false if @task_definition_infrastructure_website_url.nil?
      return false if !@task_arn.nil? && @task_arn.to_s.length > 1000
      return false if !@cluster_arn.nil? && @cluster_arn.to_s.length > 1000
      return false if @cluster_infrastructure_website_url.nil?
      return false if !@execution_role.nil? && @execution_role.to_s.length > 1000
      return false if @execution_role_infrastructure_website_url.nil?
      return false if !@task_role.nil? && @task_role.to_s.length > 1000
      return false if @task_role_infrastructure_website_url.nil?
      return false if !@platform_version.nil? && @platform_version.to_s.length > 10
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] task_definition_arn Value to be assigned
    def task_definition_arn=(task_definition_arn)
      if !task_definition_arn.nil? && task_definition_arn.to_s.length > 1000
        fail ArgumentError, 'invalid value for "task_definition_arn", the character length must be smaller than or equal to 1000.'
      end

      @task_definition_arn = task_definition_arn
    end

    # Custom attribute writer method with validation
    # @param [Object] task_arn Value to be assigned
    def task_arn=(task_arn)
      if !task_arn.nil? && task_arn.to_s.length > 1000
        fail ArgumentError, 'invalid value for "task_arn", the character length must be smaller than or equal to 1000.'
      end

      @task_arn = task_arn
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_arn Value to be assigned
    def cluster_arn=(cluster_arn)
      if !cluster_arn.nil? && cluster_arn.to_s.length > 1000
        fail ArgumentError, 'invalid value for "cluster_arn", the character length must be smaller than or equal to 1000.'
      end

      @cluster_arn = cluster_arn
    end

    # Custom attribute writer method with validation
    # @param [Object] execution_role Value to be assigned
    def execution_role=(execution_role)
      if !execution_role.nil? && execution_role.to_s.length > 1000
        fail ArgumentError, 'invalid value for "execution_role", the character length must be smaller than or equal to 1000.'
      end

      @execution_role = execution_role
    end

    # Custom attribute writer method with validation
    # @param [Object] task_role Value to be assigned
    def task_role=(task_role)
      if !task_role.nil? && task_role.to_s.length > 1000
        fail ArgumentError, 'invalid value for "task_role", the character length must be smaller than or equal to 1000.'
      end

      @task_role = task_role
    end

    # Custom attribute writer method with validation
    # @param [Object] platform_version Value to be assigned
    def platform_version=(platform_version)
      if !platform_version.nil? && platform_version.to_s.length > 10
        fail ArgumentError, 'invalid value for "platform_version", the character length must be smaller than or equal to 10.'
      end

      @platform_version = platform_version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          task_definition_arn == o.task_definition_arn &&
          task_definition_infrastructure_website_url == o.task_definition_infrastructure_website_url &&
          allocated_cpu_units == o.allocated_cpu_units &&
          allocated_memory_mb == o.allocated_memory_mb &&
          tags == o.tags &&
          subnets == o.subnets &&
          subnet_infrastructure_website_urls == o.subnet_infrastructure_website_urls &&
          security_groups == o.security_groups &&
          security_group_infrastructure_website_urls == o.security_group_infrastructure_website_urls &&
          assign_public_ip == o.assign_public_ip &&
          task_arn == o.task_arn &&
          launch_type == o.launch_type &&
          cluster_arn == o.cluster_arn &&
          cluster_infrastructure_website_url == o.cluster_infrastructure_website_url &&
          execution_role == o.execution_role &&
          execution_role_infrastructure_website_url == o.execution_role_infrastructure_website_url &&
          task_role == o.task_role &&
          task_role_infrastructure_website_url == o.task_role_infrastructure_website_url &&
          platform_version == o.platform_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, task_definition_arn, task_definition_infrastructure_website_url, allocated_cpu_units, allocated_memory_mb, tags, subnets, subnet_infrastructure_website_urls, security_groups, security_group_infrastructure_website_urls, assign_public_ip, task_arn, launch_type, cluster_arn, cluster_infrastructure_website_url, execution_role, execution_role_infrastructure_website_url, task_role, task_role_infrastructure_website_url, platform_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CloudReactorAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
